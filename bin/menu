#!/usr/bin/env ruby
require File.expand_path("../config/environment", __dir__)

def display_menu
  puts "\n=== LinkSaver - Gerenciamento de Contatos ==="
  puts "1. Adicionar contato"
  puts "2. Listar contatos"
  puts "3. Buscar contato"
  puts "4. Editar contato"
  puts "5. Deletar contato"
  puts "6. Exportar para CSV"
  puts "7. Sair"
  print "Escolha uma opção (1-7): "
end

def valid_number?(input)
  input.match?(/\A\d+\z/)
end

def add_contact
  print "Nome: "
  name = gets.chomp.strip
  if name.empty?
    puts "Erro: O nome não pode ser vazio."
    return
  end

  if Contact.exists?(name: name)
    print "Já existe um contato com o nome '#{name}'. Deseja continuar? (s/n): "
    return unless gets.chomp.downcase == 's'
  end

  print "Telefone (8-15 dígitos, opcional): "
  phone_input = gets.chomp.strip.gsub(/\D/, '')
  phone = if phone_input.empty?
            ""
          elsif phone_input.length.between?(8, 15)
            mid = phone_input.length / 2
            "#{phone_input[0...mid]}-#{phone_input[mid..-1]}"
          else
            puts "Aviso: Telefone inválido (mantido como digitado)."
            phone_input
          end

  print "E-mail (opcional): "
  email = gets.chomp.strip
  if Contact.exists?(email: email) && !email.empty?
    print "Já existe um contato com o e-mail '#{email}'. Deseja continuar? (s/n): "
    return unless gets.chomp.downcase == 's'
  end

  contact = Contact.new(name: name, phone: phone, email: email)
  if contact.save
    puts "Contato adicionado: #{contact.name} - #{contact.phone} - #{contact.email}"
  else
    puts "Erro ao adicionar: #{contact.errors.full_messages.join(', ')}"
  end
end

def list_contacts
  contacts = Contact.order(:name)
  if contacts.empty?
    puts "Nenhum contato cadastrado ainda. Adicione um com a opção 1!"
  else
    puts "\nLista de contatos (Total: #{contacts.count}):"
    puts "-" * 50
    contacts.each do |contact|
      name_display = contact.name.length > 20 ? "#{contact.name[0..16]}..." : contact.name
      puts "ID: #{contact.id.to_s.rjust(3)} | Nome: #{name_display.ljust(20)} | Telefone: #{contact.phone.ljust(15)} | E-mail: #{contact.email}"
    end
    puts "-" * 50
  end
end

def search_contact
  print "Digite o nome para buscar (ou deixe em branco para cancelar): "
  search_term = gets.chomp.strip
  if search_term.empty?
    puts "Busca cancelada."
    return
  end
  results = Contact.where("name LIKE ?", "%#{search_term}%")
  if results.empty?
    puts "Nenhum contato encontrado com '#{search_term}'."
  else
    puts "Resultados da busca por '#{search_term}':"
    results.each do |contact|
      puts "ID: #{contact.id} - #{contact.name} - #{contact.phone} - #{contact.email}"
    end
  end
end

def edit_contact
  contacts = Contact.all
  if contacts.empty?
    puts "Nenhum contato cadastrado para editar."
    return
  end

  list_contacts
  print "Digite o ID do contato para editar (ou deixe em branco para cancelar): "
  id_input = gets.chomp.strip
  if id_input.empty?
    puts "Edição cancelada."
    return
  end

  unless valid_number?(id_input)
    puts "Erro: Digite um número válido para o ID."
    return
  end

  id = id_input.to_i
  contact = Contact.find_by(id: id)
  if contact.nil?
    puts "Erro: Contato com ID #{id} não encontrado."
    return
  end

  print "Novo nome (deixe em branco para manter '#{contact.name}'): "
  name = gets.chomp.strip
  print "Novo telefone (deixe em branco para manter '#{contact.phone}'): "
  phone = gets.chomp.strip
  print "Novo e-mail (deixe em branco para manter '#{contact.email}'): "
  email = gets.chomp.strip

  contact.update(
    name: name.empty? ? contact.name : name,
    phone: phone.empty? ? contact.phone : phone,
    email: email.empty? ? contact.email : email
  )
  puts "Contato ID #{id} atualizado com sucesso!"
end

def delete_contact
  contacts = Contact.all
  if contacts.empty?
    puts "Nenhum contato cadastrado para deletar."
    return
  end

  list_contacts
  print "Digite o ID do contato para deletar (ou deixe em branco para cancelar): "
  id_input = gets.chomp.strip
  if id_input.empty?
    puts "Exclusão cancelada."
    return
  end

  unless valid_number?(id_input)
    puts "Erro: Digite um número válido para o ID."
    return
  end

  id = id_input.to_i
  contact = Contact.find_by(id: id)
  if contact.nil?
    puts "Erro: Contato com ID #{id} não encontrado."
    return
  end

  contact.destroy
  puts "Contato ID #{id} deletado com sucesso!"
end

def export_to_csv
  contacts = Contact.all
  if contacts.empty?
    puts "Nenhum contato para exportar."
    return
  end

  require 'csv'
  file_path = "contatos.csv"
  CSV.open(file_path, "w") do |csv|
    csv << ["Nome", "Telefone", "E-mail"]
    contacts.each do |contact|
      csv << [contact.name, contact.phone, contact.email]
    end
  end
  puts "Contatos exportados para '#{file_path}' com sucesso!"
end

loop do
  display_menu
  option_input = gets.chomp.strip

  unless valid_number?(option_input)
    puts "Erro: Digite um número entre 1 e 7."
    next
  end

  option = option_input.to_i
  unless (1..7).include?(option)
    puts "Erro: Opção inválida! Escolha entre 1 e 7."
    next
  end

  case option
  when 1 then add_contact
  when 2 then list_contacts
  when 3 then search_contact
  when 4 then edit_contact
  when 5 then delete_contact
  when 6 then export_to_csv
  when 7
    puts "Saindo do LinkSaver. Até logo!"
    break
  end
end